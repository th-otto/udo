@database "Die Anleitung zur UDO-Shell fÅr Win32"
@author "Dirk Hagedorn"
@$VER: 1.06 (10. Juni 2013)
@width 70
@default Titel

@node "Titel"
@{U}Titel                                              UDO-Shell fÅr Win32@{u}


@autorefoff
                          Die Anleitung zur

                         UDO-Shell fÅr Win32

                                 1.06
                            10. Juni 2013

                                 von

@limage ../images/dh.img 0


                            Dirk Hagedorn
                              Asmecke 1
                           D-59846 Sundern
                    E-Mail: info@@dirk-hagedorn.de
                     http://www.dirk-hagedorn.de
@autorefon


                          Inhaltsverzeichnis
@endnode


@node Main "Inhaltsverzeichnis"
@symbol ari "Inhaltsverzeichnis"
@toc "Titel"
@alias "HID_CONTENTS"
@{U}Inhaltsverzeichnis                                 UDO-Shell fÅr Win32@{u}

 1  Vorwort

 2  Bedienung
    2.1  Quelle, Ziel, Parameter, Ergebnis
    2.2  Formate
    2.3  Optionen
    2.4  Symbole

 3  Konfiguration
    3.1  Programm-Konfiguration
    3.2  Format-Konfiguration
    3.3  Einstellungen
    3.4  Konfigurations-Beispiele
         3.4.1  Beispiel fÅr WinHelp
         3.4.2  Beispiel fÅr HTML
         3.4.3  Beispiel fÅr RTF
         3.4.4  Beispiel fÅr LaTeX
         3.4.5  Beispiel fÅr PDFLaTeX

 4  Die INI-Datei

 5  Historie
    5.1  Version 1.06
    5.2  Version 1.04
    5.3  Version 1.02
    5.4  Version 0.96
    5.5  Version 0.95

@endnode


@node "Vorwort"
@toc "Main"
@alias "Vorwort"
@{U}1  Vorwort                                         UDO-Shell fÅr Win32@{u}

In dieser Anleitung ist mindestens eine Behauptung falsch, es kann 
auch diese sein. Zudem enthÑlt sie mindestens einen 
RÑchtschreibfehler.

Die UDO-Shell fÅr Win32 (kurz:UDOSH) soll den tippfaulen und DOS-Box- 
hassenden UDO-Benutzern - zu denen auch ich mich zÑhle - unter Windows 
eine effiziente Mîglichkeit bieten, UDO-Quelltexte zu bearbeiten, 
konvertieren und auszugeben. Diese Anleitung soll Fragen rund um 
Bedienung und Konfiguration der UDOSH beantworten.


@{U}Copyright@{u}

Die UDOSH ist Freeware, der Sourcecode fÅr Microsoft Visual C++ 4.x 
ist erhÑltlich. Die Weitergabe bzw. das Hochladen auf FTP-Server oder 
Mailboxen ist erlaubt und erwÅnscht, solange das Archiv unverÑndert 
weitergegeben wird.

@endnode


@node "Bedienung"
@toc "Main"
@alias "Bedienung"
@{U}2  Bedienung                                       UDO-Shell fÅr Win32@{u}

Wer die UDOSH zum ersten Mal startet, wird sehr wahrscheinlich ob des 
Anblicks dieses Åberladenen, ziemlich unÅbersichtlichen Dialogs 
kopfschÅttelnd zurÅckschrecken. Doch die öberfrachtung mit 
Kontrollelementen hat System. ;-)

Das Fenster ist in vier Teile geteilt:

 2.1  Quelle, Ziel, Parameter, Ergebnis
 2.2  Formate
 2.3  Optionen
 2.4  Symbole

@endnode


@node "Quelle, Ziel, Parameter, Ergebnis"
@toc "Bedienung"
@alias "QuelleZielParameterErgebnis"
@{U}2.1  Quelle, Ziel, Parameter, Ergebnis             UDO-Shell fÅr Win32@{u}

Im oberen Teil geben Sie Quell- und Zieldatei an, die bearbeitet 
werden sollen. Zudem kînnen Sie jeder Datei zwei Programme zuweisen, 
welche diese Dateien bearbeiten sollen. Typischerweise benutzt man 
hier ein Programm zur Umwandlung und eines zum Editieren.

 @{B}Quelle:@{b}    Geben Sie hier den Namen der UDO-Quelldatei an. Durch 
            Auswahl der SchaltflÑche [...] îffnet sich der 
            Dateiauswahldialog, in dem Sie die gewÅschte Datei 
            auswÑhlen kînnen.

 @{B}Ziel:@{b}      Gleiches Prinzip wie oben, jedoch wird der Name der 
            Zieldatei von UDO automatisch bestimmt, sobald sich der 
            Name der Quelldatei oder das Ausgabeformat Ñndert.

 @{B}Param 1:@{b}   Hier erkennen Sie den Namen der ersten Parameterdatei 
            (bspw. die Projektdatei fÅr den Microsoft Helpcompiler), 
            sofern Sie unter "Format-Konfiguration" fÅr das aktuelle 
            Format eine Endung fÅr die Parameterdatei vergeben haben. 
            Der Name ist nicht verÑnderbar und wird von der UDOSH 
            automatisch erzeugt.

 @{B}Param 2:@{b}   Hier erkennen Sie entsprechend den Namen der zweiten 
            Parameterdatei (bspw. die Fehlerdatei des Microsoft 
            Helpcompiler).

 @{B}Ergebnis:@{b}  Hier erkennen Sie den Namen der Ergebnisdatei (bspw. die 
            fertige Windows-Hilfedatei), sofern Sie unter "Format- 
            Konfiguration" fÅr das aktuelle Format eine Endung fÅr die 
            Ergebnisdatei vergeben haben. Der Name ist nicht 
            verÑnderbar und wird von der UDOSH automatisch erzeugt.


Rechts neben den Eingabefeldern fÅr die Dateinamen erkennen Sie je ein 
Paar SchaltflÑchen. öber diese SchaltflÑchen kînnen Programme 
aufgerufen werden, denen der jeweilige Dateiname Åbergeben wird. Mehr 
hierzu im Abschnitt "Programm-Konfiguration".

@endnode


@node "Formate"
@toc "Bedienung"
@alias "Formate"
@{U}2.2  Formate                                       UDO-Shell fÅr Win32@{u}

WÑhlen Sie einfach durch Anklicken das gewÅnschte Format aus. Die 
UDOSH paût danach alle Dateinamen an und schreibt die Namen der 
zugehîrigen Anwendungen in die Programm-SchaltflÑchen.

Wenn Sie auf die SchaltflÑche "Konfiguration" klicken, haben Sie die 
Mîglichkeit, die jeweilige Format-Konfiguration anzupassen.

@endnode


@node "Optionen"
@toc "Bedienung"
@alias "Optionen"
@{U}2.3  Optionen                                      UDO-Shell fÅr Win32@{u}

In diesem Teil bestimmen Sie die Optionen, die dem UDO-Binary in der 
Kommandozeile Åbergeben werden sollen.

 @{B}Logfile:@{b}        Klicken Sie auf die SchaltflÑche, um die Datei mit 
                 den Editor, den Sie fÅr UDO angemeldet haben, zu 
                 bearbeiten. (De)Selektieren Sie die Checkbox, um ein 
                 Logfile (nicht) von UDO erzeugen zu lassen.
 @{B}Hypfile:@{b}        Siehe oben, jedoch dreht sich hier alles um die Datei 
                 mit TrennvorschlÑgen.
 @{B}Treefile:@{b}       Siehe oben, jedoch dreht sich hier alles um die Datei 
                 mit dem Aufbau der Quelldatei bezÅglich Include- 
                 Files.
 @{B}Mapfile:@{b}        Siehe oben, jedoch dreht sich hier alles um die 
                 Mapdatei fÅr den Microsoft Helpcompiler. Die Mapdatei 
                 wird nur bei der Umwandlung nach WinHelp angelegt.
 @{B}Testmodus:@{b}      UDO testet lediglich die Eingabedatei und erzeugt ein 
                 Logfile, falls diese Option aktiviert ist.
 @{B}Statusinfo:@{b}     UDO gibt wÑhrend der Umwandlung ausfÅhrliche 
                 Informationen Åber den Ablauf der Umwandlung aus, 
                 falls diese Option aktiviert ist.
 @{B}Tastendruck:@{b}    UDO wartet am Ende der Umwandlung auf einen 
                 Tastendruck, falls diese Option aktiviert ist.
 @{B}Warnmeldungen:@{b}  UDO erzeugt nicht nur Fehlermeldungen, sondern auch 
                 Warnmeldungen, falls diese Option aktiviert ist.
 @{B}Verzeichnis:@{b}    Die UDOSH (nicht UDO!) erzeugt abhÑngig vom 
                 Ausgabeformat ein Verzeichnis, in dem die 
                 Ausgabedatei(en) ausgegeben werden, falls diese 
                 Option aktiviert ist.

@endnode


@node "Symbole"
@toc "Bedienung"
@alias "Symbole"
@{U}2.4  Symbole                                       UDO-Shell fÅr Win32@{u}

Hier kînnen Symbole eingegeben und (de)aktiviert werden.

Ob Symbole gesetzt sind, lÑût sich innerhalb einer UDO-Quelldatei 
mittels @{I}!ifset [...]@{i} abfragen. Dadurch lassen sich ohne énderung an 
der Quelldatei unterschiedliche Ergebnisse erzeugen, indem man 
verschiedene Symbole benutzt und diese im UDO-Quelltext entsprechend 
abfragt.

@{B}Beispiel:@{b} Ich benutze zumeist fÅr WinHelp-Quelltexte ein Symbol namens 
"Compress". Im UDO-Quelltext fÅge ich folgende Zeilen ein:

     !ifset [Compress]
     !win_medium_compression
     !endif

WÑhrend der Entwicklung eines Quelltextes deaktiviere ich das Symbol, 
damit UDO keinen Komprimierungsbefehl in der Projektdatei fÅr den 
Microsoft Helpcompiler erzeugt und dieser dann wesentlich schneller 
aus der von UDO erzeugten RTF-Datei eine Windows-Hilfedatei erzeugt. 
Bin ich mit der Erstellung des Quelltextes fertig, aktiviere ich das 
Symbol und die Windows-Hilfedatei wird vom Microsoft Helpcompiler 
komprimiert.

@endnode


@node "Konfiguration"
@toc "Main"
@alias "Konfiguration"
@{U}3  Konfiguration                                   UDO-Shell fÅr Win32@{u}

Dieses Kapitel beschreibt die Konfigurationsmîglichkeiten der UDOSH.

 3.1  Programm-Konfiguration
 3.2  Format-Konfiguration
 3.3  Einstellungen
 3.4  Konfigurations-Beispiele
      3.4.1  Beispiel fÅr WinHelp
      3.4.2  Beispiel fÅr HTML
      3.4.3  Beispiel fÅr RTF
      3.4.4  Beispiel fÅr LaTeX
      3.4.5  Beispiel fÅr PDFLaTeX

@endnode


@node "Programm-Konfiguration"
@toc "Konfiguration"
@alias "ProgrammKonfiguration"
@{U}3.1  Programm-Konfiguration                        UDO-Shell fÅr Win32@{u}

Neben den Eingabefelder fÅr die Dateinamen sehen Sie acht paarweise 
angeordnete SchaltflÑchen.

Die UDOSH ermîglicht es Ihnen, neben dem Aufruf von UDO zwecks 
Konvertierung bzw. eines Editors zwecks Bearbeitung der Quelldatei 
jedem Format pro Dateityp (Zieldatei, Parameterdatei, Ergebnisdatei) 
zwei beliebige Anwendungen zuzuweisen.

Dadurch ist es - bei entsprechender Konfiguration - mit nur wenigen 
Mausklicks aus einer UDO-Quelldatei eine Windows-Hilfedatei, eine 
Homepage oder irgendeine andere Datei mit Hilfe UDOs und anderer 
Kompiler zu erzeugen.

Das obige Beispiel zeigt (m)eine Konfiguration fÅr WinHelp:

  1. Quelltext auswÑhlen
  2. Auf die SchaltflÑche mit der Beschriftung "udo32" klicken: UDO 
     wandelt die Datei um und erzeugt dabei ein Logfile, eine RTF- und 
     eine HPJ-Datei.
  3. Auf die SchaltflÑche mit der Beschriftung "hcp" klicken und der 
     Microsoft Helpcompiler erzeugt aus der RTF-Datei eine Windows- 
     Hilfedatei.
  4. Falls ein Fehler aufgetreten ist, so klicke ich rufe ich den 
     Editor auf, um mir die Datei mit der Endung ".err" anzusehen.
  5. Tritt kein Fehler auf, so klicke ich auf die SchaltflÑche mit der 
     Beschriftung "Winhlp32" und schon sehe ich die fertige 
     Hilfedatei.
  6. Auf "Pfe32" klicken, um mit dem sehr empfehlenswerten 
     "Programmer's File Editor" den UDO-Quelltext zu bearbeiten. 
     Weiter bei Punkt 2, bis alles paût.

@endnode


@node "Format-Konfiguration"
@toc "Konfiguration"
@alias "HID_FORMCONF"
@{U}3.2  Format-Konfiguration                          UDO-Shell fÅr Win32@{u}

@symbol ari "FormatConfiguration"
FÅr jedes Format kînnen Sie hier festlegen, welche Endungen die 
jeweiligen Dateien haben und wie sie an die zugehîrigen Programme 
Åbergeben werden sollen.

WÑhlen Sie zunÑchst im Hauptfenster das Format aus und Klicken Sie 
dann auf die SchaltflÑche "Konfiguration", um diesen Dialog zu îffnen.

WÑhlen Sie dann den Dateityp aus, den Sie anpassen mîchten und passen 
Sie ggf. die öbergabeparameter an:

 @{B}Endung:@{b} Geben Sie hier die Endung des Dateityps (inkl. fÅhrendem 
     Punkt) ein. Bleibt fÅr die Zieldatei dieses Feld leer, so 
     verwendet die UDOSH die Standardendungen von UDO.

 @{B}Dateiname kleingeschrieben:@{b} UDO benutzt normalerweise den Dateinamen 
     der Quelldatei. Ist dieser nicht komplett kleingeschrieben, so 
     kann es zu Problemen oder ungewÅnschten Effekten kommen. 
     Horrorbeispiel: Die Quelldatei lautet Index.u, UDO erzeugt 
     Index.html, niemand findet Ihre Homepage, da Sie dummerweise 
     allen Bekannten als URL http://.../index.html genannt haben. 
     Klicken Sie hingegen diese SchaltflÑche an, so wird der 
     ausgewÑhlte Dateityp immer kleingeschrieben.

 @{B}Unix-Pfad fÅr Anwendung:@{b} Selektieren Sie diese SchaltflÑche, um einer 
     Anwendung im Dateinamen statt Backslashes Slashes zu Åbergeben. 
     emTeX kommt beispielweise nicht mit einem Dateinamen wie 
     C:\TeX\foo.tex klar, sondern benîtigt C:/TeX/foo.tex.

Falls Sie nicht wissen, wie Sie jetzt die UDOSH konfigurieren sollen, 
so schauen Sie sich einfach mal die folgenden Konfigurations-Beispiele 
an.

@endnode


@node "Einstellungen"
@toc "Konfiguration"
@alias "HID_SETTINGS"
@{U}3.3  Einstellungen                                 UDO-Shell fÅr Win32@{u}

@symbol ari "Settings"
@endnode


@node "Konfigurations-Beispiele"
@toc "Konfiguration"
@alias "KonfigurationsBeispiele"
@{U}3.4  Konfigurations-Beispiele                      UDO-Shell fÅr Win32@{u}

 3.4.1  Beispiel fÅr WinHelp
 3.4.2  Beispiel fÅr HTML
 3.4.3  Beispiel fÅr RTF
 3.4.4  Beispiel fÅr LaTeX
 3.4.5  Beispiel fÅr PDFLaTeX

@endnode


@node "Beispiel fÅr WinHelp"
@toc "Konfigurations-Beispiele"
@alias "BeispielfFCrWinHelp"
@{U}3.4.1  Beispiel fÅr WinHelp                        UDO-Shell fÅr Win32@{u}

 @{B}Endung Parameterdatei:@{b}    .hpj
 @{B}Endung Parameterdatei 2:@{b}  .err
 @{B}Endung Ergebnisdatei:@{b}     .hlp

 @{B}Anwendung Parameterdatei:@{b} hcp.exe
 @{B}Editor Parameterdatei:@{b}    irgendeiner
 @{B}Anwendung Parameterdatei 2:@{b} leer
 @{B}Editor Parameterdatei 2:@{b}  irgendeiner
 @{B}Anwendung Ergebnisdatei:@{b}  C:\Windows\winhlp32.exe

@{B}Anmerkung:@{b} hcp.exe ist der Microsoft Helpcompiler, der aus einer von 
UDO erzeugten RTF- und HPJ-Datei eine Windows-Hilfedatei compiliert. 
Der HCP kann von der Microsoft-Website heruntergeladen werden.

@endnode


@node "Beispiel fÅr HTML"
@toc "Konfigurations-Beispiele"
@alias "BeispielfFCrHTML"
@{U}3.4.2  Beispiel fÅr HTML                           UDO-Shell fÅr Win32@{u}

 @{B}Anwendung Zieldatei:@{b}    C:\Programme\Internet Explorer\iexplore.exe
 @{B}Editor Zieldatei:@{b} 
                         C:\Programme\Netscape\Communicator\Program\netscape.exe
 @{B}Zieldatei:@{b}              [x] Dateiname kleingeschrieben

Falls Sie den HTML-Ouptut von UDO mit weiteren Browsern ÅberprÅfen 
mîchten, kein Problem:

 @{B}Endung Parameterdatei:@{b}  .html
 @{B}Anwendung Parameterdatei:@{b} C:\Lynx\lynx.exe
 @{B}Editor Parameterdatei:@{b} 
                         C:\Programme\Netscape\Navigator\Program\netscape.exe
 @{B}Parameterdatei:@{b}         [x] Dateiname kleingeschrieben

@{B}Anmerkung:@{b} Sie sehen, man muû nicht unbedingt einen Editor anmelden, 
sondern kann auch zwei Browser verwenden.

@endnode


@node "Beispiel fÅr RTF"
@toc "Konfigurations-Beispiele"
@alias "BeispielfFCrRTF"
@{U}3.4.3  Beispiel fÅr RTF                            UDO-Shell fÅr Win32@{u}

 @{B}Anwendung Zieldatei:@{b}    C:\Office\Winword\winword.exe
 @{B}Editor Zieldatei:@{b}       C:\Programme\Zubehîr\wordpad.exe

 @{B}Endung Parameterdatei:@{b}  .rtf
 @{B}Anwendung Parameterdatei:@{b} C:\Programme\Papyrus\papyrus.exe

@endnode


@node "Beispiel fÅr LaTeX"
@toc "Konfigurations-Beispiele"
@alias "BeispielfFCrLaTeX"
@{U}3.4.4  Beispiel fÅr LaTeX                          UDO-Shell fÅr Win32@{u}

   ˘ emTeX:

      @{B}Endung Parameterdatei:@{b}  .idx
      @{B}Endung Ergebnisdatei:@{b}   .dvi

      @{B}Anwendung Zieldatei:@{b}    C:\emtex\bin\gltx2e.bat
      @{B}Anwendung Zieldatei:@{b}    C:\emtex\bin\makeindx.exe
      @{B}Anwendung Ergebnisdatei:@{b} C:\emtex\bin\v.bat

   ˘ MikTeX:

      @{B}Endung Parameterdatei:@{b}  .idx
      @{B}Endung Ergebnisdatei:@{b}   .dvi

      @{B}Anwendung Zieldatei:@{b}    C:\texmf\miktex\bin\latex.exe
      @{B}Anwendung Zieldatei:@{b}    C:\texmf\miktex\bin\makeindex.exe
      @{B}Anwendung Ergebnisdatei:@{b} C:\texmf\miktex\bin\yap.exe

@endnode


@node "Beispiel fÅr PDFLaTeX"
@toc "Konfigurations-Beispiele"
@alias "BeispielfFCrPDFLaTeX"
@{U}3.4.5  Beispiel fÅr PDFLaTeX                       UDO-Shell fÅr Win32@{u}

Hier fehlt noch etwas...

@endnode


@node "Die INI-Datei"
@toc "Main"
@alias "DieINIDatei"
@{U}4  Die INI-Datei                                   UDO-Shell fÅr Win32@{u}

In der Datei UDOSH.INI, die im gleichen Verzeichnis wie die EXE-Datei 
erzeugt wird, sichert die UDOSH alle Einstellungen.

Direktes Bearbeiten der INI-Datei ist zwar mîglich, dennoch sollte man 
Abstand davon nehmen.

@endnode


@node "Historie"
@toc "Main"
@alias "Historie"
@{U}5  Historie                                        UDO-Shell fÅr Win32@{u}

 5.1  Version 1.06
 5.2  Version 1.04
 5.3  Version 1.02
 5.4  Version 0.96
 5.5  Version 0.95

@endnode


@node "Version 1.06"
@toc "Historie"
@alias "Version106"
@{U}5.1  Version 1.06                                  UDO-Shell fÅr Win32@{u}

   ˘ Einige kleinere Bugfixes

   ˘ UnterstÅtzung fÅr Apple-Help

   ˘ Einige Parameter und Programme vorbelegt

@endnode


@node "Version 1.04"
@toc "Historie"
@alias "Version104"
@{U}5.2  Version 1.04                                  UDO-Shell fÅr Win32@{u}

   ˘ Einige kleinere Bugfixes

   ˘ Anpassungen an die aktuelle UDO-Version

@endnode


@node "Version 1.02"
@toc "Historie"
@alias "Version102"
@{U}5.3  Version 1.02                                  UDO-Shell fÅr Win32@{u}

   ˘ Die Shell besitzt nun eine englischsprachige OberflÑche.

   ˘ WinHelp4 als Format sowie Check-Buttons fÅr diverse Map-Files fÅr 
     WinHelp sind hinzugekommen. Diese werden ab UDO6 PL11 
     unterstÅtzt.

   ˘ Es ist nun mîglich, die Shell "always on top" zu halten. Dazu 
     selektiert man den Check-Button "AOT".

@endnode


@node "Version 0.96"
@toc "Historie"
@alias "Version096"
@{U}5.4  Version 0.96                                  UDO-Shell fÅr Win32@{u}

   ˘ Alle Radiobuttons wurden in ein Kombinationsfeld verfrachtet.

   ˘ Platz fÅr eine zweite Parameterdatei geschaffen.

   ˘ Hauptdialog etwas umsortiert.

   ˘ PDFLaTeX wird unterstÅtzt (UDO6 beherrscht es bald).

   ˘ In der Format-Konfiguration muû nun nicht mehr unbedingt ein 
     Punkt vor die Endung gesetzt werden; die Shell erledigt das von 
     selbst.

   ˘ Diese Anleitung ;-)

@endnode


@node "Version 0.95"
@toc "Historie"
@alias "Version095"
@{U}5.5  Version 0.95                                  UDO-Shell fÅr Win32@{u}

   ˘ AnfÅhrungszeichen um den Dateinamen, der der UDOSH Åbergeben 
     wird, werden entfernt.

   ˘ Dateinamen mit Leerzeichen werden mit AnfÅhrungszeichen 
     geklammmert.

   ˘ Die Zieldatei kann nun korrekt bestimmt werden (Wilfried Behne). 
     Nach dem éndern des Zielformates muû die Zieldatei jedoch neu 
     bestimmt werden, da die UDO-Shell die Zieldatei wieder anpaût.

@endnode


@node "UDO7"
@toc "Main"
@alias "UDONFFFF"
@{U}UDO7                                               UDO-Shell fÅr Win32@{u}

@autorefoff
                    Dieser Text wurde erzeugt mit

                                 @{B}UDO@{b}
                         Version 7.10 (1228)
                                Linux

                Copyright © 1995-2001 by Dirk Hagedorn
              Copyright © 2001-2013 by The UDO Community
                         UDO ist Open Source

@limage udo_mw.img 0
   UDO ist ein Programm, mit dem Sie Textdateien, die im Universal- 
  Document-Format erstellt wurden, in Åber 25 Zielformate umwandeln 
                               kînnen.

  Weitere Informationen sowie die aktuellen Versionen finden Sie im 
                            Internet unter
                   http://www.udo-open-source.org/

@endnode



