<?xml version="1.0"?>
<fpdoc-descriptions>
  <package name="fpGUI">
    <module name="fpg_main">
      <short>The main unit that ties everything together from CoreLib</short>
      <descr>
        <p>
          <printshort id="fpg_main"/>. This unit contain the higher level classes that the end-user will use to build applications.
</p>
        <p>This unit also contains the global objects instances used to start an application, or helper functions used through a a fpGUI based application. eg: <link id="fpgApplication"/>, <link id="fpgClipboard"/>.</p>
      </descr>
      <!-- procedure Visibility: default -->
      <element name="fpgPostMessage">
        <short>Posts a message to the event queue</short>
        <descr>fpgPostMessage posts a message to the event queue, but doesn't wait for it to compelete. It returns immediately.</descr>
        <errors/>
        <seealso>
          <link id="fpg_main.fpgSendMessage"/>
        </seealso>
      </element>
      <!-- procedure Visibility: default -->
      <element name="fpgSendMessage">
        <short>Sends a message to the event queue</short>
        <descr>fpgSendMessage sends a message to the event queue and waits for it to complete before it returns.</descr>
        <errors/>
        <seealso>
          <link id="fpg_main.fpgPostMessage"/>
        </seealso>
      </element>
      <element name="fpgColorToRGB">
        <short>Convert a color to the RGB values of that color</short>
        <descr><printshort id="fpgColorToRGB"/>. Not all <link id="fpg_base.TfpgColor">TfpgColor</link> values are in RGB format. 
For example, you get "named" colors too (eg: clWindowBackground), which
is simply an index value, but later translated to a real RGB value via the theming system.</descr>
      </element>
      <element name="fpgGetNamedColor">
        <short>Returns a "named" TfpgColor based on a RGB color</short>
      </element>
      <element name="fpgSetNamedColor">
        <short>Define a new "named" color</short>
      </element>
      <element name="fpgGetNamedFontList">
        <short>Return a TStringList of "named" fonts</short>
      </element>
      <element name="fpgSetNamedFont">
        <short>Defined a new "named" font</short>
        <descr>
          <printshort id="fpgSetNamedFont"/>. Because fpGUI is a cross-platform toolkit, the same fonts might not be available on all systems. For this reason fpGUI supports "named" or "alias names" for fonts. You can specify a font description, and then give that font description a name. Then any component that has a FontDesc property you can pass the full font description, or the "named" font name. An example of a named font is '#Edit1' which is the default font used for <link id="fpg_edit.TfpgEdit">TfpgEdit</link>.</descr>
      </element>
      <element name="TfpgCanvas">
        <short>This is the drawing Canvas of each widget</short>
        <descr><printshort id="TfpgCanvas"/>.</descr>
      </element>
      <element name="TfpgCanvas.DrawText">
        <short>Output Text onto the Canvas</short>
        <descr>
          <printshort id="TfpgCanvas.DrawText"/>.</descr>
      </element>
      <element name="TfpgCanvas.StretchDraw" link="#fpgui.fpg_base.TfpgCanvasBase.StretchDraw">
      </element>
      <element name="PrintRect">
        <short>Prints rectangle information to console</short>
        <descr><printshort id="PrintRect"/>. This is a helper function for debugging purposes.</descr>
        <seealso>
          <link id="fpg_base.TfpgRect">TfpgRect</link>
        </seealso>
      </element>
      <element name="TfpgStyle">
        <short>This supplies very basic theming support for now</short>
        <descr><p><printshort id="TfpgStyle"/>. At a later date the theming support in
fpGUI will be totally reworked to supply built-in and image based theming.</p><p>See the
document named <var>theming_spec.txt</var> in the "docs" folder for details of what is
planned.</p></descr>
      </element>

<element name="fpgRect">
<seealso>
<link id="fpg_base.TfpgRect">TfpgRect</link>
</seealso>
</element>

<element name="TfpgApplication">
<short>A concrete class that encapsulates a fpGUI application</short>
</element>

<element name="TfpgApplication.InvokeHelp" link="#fpgui.fpg_base.TfpgApplicationBase.InvokeHelp">
<short>fake</short>
</element>

<element name="TfpgApplication.HelpFile" link="#fpgui.fpg_base.TfpgApplicationBase.HelpFile">
<short>fake</short>
</element>


<element name="TfpgTimer">
<short>A timer component for fpGUI applications</short>
<descr><printshort id="TfpgTimer"/>.</descr>
</element>

<element name="TfpgTimer.Create">
<short>Use this method to create a timer component instance</short>
<descr><printshort id="TfpgTimer.Create"/>. The AInterval parameter is a value in
milliseconds. The timer will fire the OnTimer event every AInterval milliseconds or
until the timer is disabled when the Enabled property is set to False.</descr>
</element>

<element name="TfpgTimer.Enabled" link="#fpgui.fpg_base.TfpgBaseTimer.Enabled">
</element>


<element name="TfpgWindow">
<short>Encapsulates a top level or child window</short>
<descr><printshort id="TfpgWindow"/>.</descr>
</element>

    </module>
    <!-- fpg_main -->
  </package>
</fpdoc-descriptions>
